FORMAT: 1A
HOST: https://your-api-host.com

# TellMe api

# Group Authentication API

These APIs allow users to authenticate using a Firebase token and receive a custom token with additional user claims.

## Login [/api/v1/auth/login]

### Login with Firebase Token [POST]

Authenticates a user using a Firebase ID token. On success, returns a custom token with additional user metadata (email and roles). On failure, returns an appropriate error message.

+ Request (application/json)
    + Attributes (object)
        + firebaseToken: `eyJhbGci...` (string, required) - Firebase ID token obtained from client-side authentication

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + token: `eyJhbGci...` (string) - Custom token with additional claims

+ Response 401 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `User not found` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)
            

## Citizen [/api/v1/auth/citizens]

### Register a new citizen user [POST]

Registers a citizen by verifying their Firebase token, validating their email, checking for uniqueness, saving the user in the database, and returning a custom token.

+ Request (application/json)
    + Attributes (object)
        + email: `citizen@example.com` (string, required) - The email address of the citizen
        + firebaseToken: `eyJhbGci...` (string, required) - Firebase ID token to authenticate the user

+ Response 201 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + token: `eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...` (string) - A Firebase custom token that can be used for authentication

+ Response 400 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Error` (string) - If some of the request fields are invalid

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)
            

## Citizen Surveys [/api/v1/auth/citizens/{uid}/surveys{?pageIndex,pageSize}]

### List published surveys for a citizen [GET]

Returns a paginated list of surveys available to a citizen. Only surveys with `status: published` are returned. Supports pagination via `pageIndex` and `pageSize`.

+ Parameters
    + uid: `user456` (string, required) - Unique identifier of the citizen
    + pageIndex: `0` (optional, string) - 0-based index of the first item in the current page (default: 0)
    + pageSize: `10` (optional, string) - Number of items to include in the current page (default: 10)

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + surveys (array[Survey]) - List of published surveys
            + metadata (object)
                + totalCount: 25 (number) - Total number of published surveys

+ Body

    {
        "status": "success",
        "data": {
            "surveys": [
                {
                    "title": "Citizen Feedback",
                    "rewardPoints": 10,
                    "creationDate": "2025-05-20T12:30:00Z",
                    "status": "published",
                    "questions": [
                        {
                            "id": "q1",
                            "question": "How do you rate our services?",
                            "type": "multiple-choice",
                            "options": [
                                {
                                    "id": "opt1",
                                    "text": "Excellent"
                                },
                                {
                                    "id": "opt2",
                                    "text": "Good"
                                }
                            ]
                        }
                    ]
                }
            ],
            "metadata": {
                "totalCount": 25
            }
        }
    }

+ Response 400 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Invalid pagination parameters` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

## Survey Answers [/api/v1/auth/citizens/{uid}/surveys/{surveyId}/answer]

### Get a citizen's survey answer [GET]

Retrieves the survey answer submitted by a specific citizen (`uid`) for a specific survey (`surveyId`). If no answer is found, returns a 404 error.

+ Parameters
    + uid: `user456` (string, required) - Unique identifier of the citizen
    + surveyId: `survey789` (string, required) - Unique identifier of the survey

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + answer (SurveyAnswer)

+ Body

    {
        "status": "success",
        "data": {
            "answer": {
                "_id": {
                    "surveyId": "survey789",
                    "uid": "user456"
                },
                "creationDate": "2025-05-27T12:00:00Z",
                "answer": [
                    {
                        "id": "q1",
                        "answer": "Very satisfied",
                        "type": "multiple-choice"
                    }
                ]
            }
        }
    }

+ Response 404 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Survey answer not found` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)


## Surveys [/api/v1/surveys{?pageIndex,pageSize}]

### Create a new survey [POST]

Creates a new survey. Returns the ID of the newly created survey if successful. If the creation fails, returns an error response with details.

+ Request (application/json)
    + Attributes (object)
        + survey (Survey) - Survey object to be created

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string) 
        + data (object)
            + surveyId: `string` (string) - The ID of the newly created survey

+ Response 400 (application/json)
    + Attributes (object)
        + status: `error` (string) 
        + data (object)
            + message: `string` (string) - Error message describing the failure

### List surveys [GET]

Returns the list of surveys saved in the system.

+ Parameters
    + pageIndex: 0 (optional, string) - 0-based index of the first item in the current page
    + pageSize: 10 (optional, string) - Number of items to include in the current page

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string) 
        + data (object)
            + surveys (array[Survey]) - List of surveys
            + metadata (object)
                + totalCount: 25 (number) - Total number of surveys matching the query

+ Response 400 (application/json)
    + Attributes (object)
        + status: `error` (string) 
        + data (object)
            + message: `string` (string) - Error message describing the failure
            
            
## Survey [/api/v1/surveys/{surveyId}]

### Get a survey [GET]

Retrieves the survey identified by the given `surveyId`.

+ Parameters
    + surveyId: `12345` (string, required) - The ID of the survey to retrieve

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + survey (Survey)

+ Body

    {
        "status": "success",
        "data": {
            "survey": {
                "title": "Customer Satisfaction Survey",
                "rewardPoints": 10,
                "creationDate": "2025-05-20T12:30:00",
                "status": "published",
                "questions": [
                    {
                        "id": "q1",
                        "question": "How satisfied are you with our service?",
                        "type": "multiple-choice",
                        "options": [
                            { "id": "o1", "text": "Very satisfied" },
                            { "id": "o2", "text": "Satisfied" },
                            { "id": "o3", "text": "Neutral" },
                            { "id": "o4", "text": "Dissatisfied" }
                        ]
                    }
                ]
            }
        }
    }

+ Response 404 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Survey not found` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)


### Update a survey [PUT]

Updates the survey with the provided data. Returns the updated survey ID on success.

+ Parameters
    + surveyId: `Survey ID` (string, required) - The ID of the survey to update

+ Request (application/json)
    + Attributes (object)
        + survey (Survey) - Survey object with updated fields

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + surveyId: `Survey ID` (string) - The ID of the updated survey

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

## Quizzes [/api/v1/agencies/{agencyId}/quizzes]

### Create Quiz [POST]

Creates a new quiz associated with the given agency.  
Ensures the quiz is valid before saving it to the database.  
Returns the ID of the newly created quiz if successful.

+ Parameters
    + agencyId: `agency456` (string) - ID of the agency creating the quiz

+ Request (application/json)

    + Attributes (object)
        + quiz (Quiz)

+ Response 200 (application/json)

    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + quizId: `quiz789` (string) - ID of the newly created quiz

+ Response 400 (application/json)

    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Missing or invalid required fields` (string)

+ Response 500 (application/json)

    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

# Data Structures

## Survey (object)
+ title: `Survey Title` (string, required) - Title of the survey
+ rewardPoints: 5 (number, required) - Reward points assigned for the completition of the survey
+ creationDate: `2025-05-20T12:30:00` (string, required) - Timestamp of the creation date of the survey
+ status: `created` (SurveyStatus, required) - Current status of the survey
+ questions (array[SurveyQuestion], required)
    + Members
        + (SurveyQuestion)

## SurveyQuestion (object)
+ id: `Question ID` (string, required) - Unique identifier for the question
+ question: `Question` (string, required) - The question text
+ type: `multiple-choice` (string, required) - Type of the question, currently only 'multiple-choice' supported
+ options (array[SurveyQuestionOption], required)
    + Members
        + (SurveyQuestionOption)

## SurveyQuestionOption (object)
+ id: `Option ID` (string, required) - Unique identifier for the option
+ text: `Option description` (string, required) - Text for the option

## SurveyStatus (enum)
+ `created`
+ `published`
+ `closed`

## SurveyAnswer (object)
+ _id (object, required)
    + surveyId: `abc123` (string, required) - ID of the survey
    + uid: `user456` (string, required) - ID of the user who answered
+ creationDate: `2025-05-27T12:00:00Z` (string, required) - Timestamp when the answer was created
+ answer (array[SurveyQuestionAnswer], required) - Answers to the survey questions
    + Members
        + (SurveyQuestionAnswer)

## SurveyQuestionAnswer (object)
+ id: `q1` (string, required) - ID of the question being answered
+ answer: `Very satisfied` (string, required) - User's answer to the question
+ type: `multiple-choice` (string, required) - Type of the question (currently only 'multiple-choice')

## Quiz (object)
+ _id: `abc123` (string) - Unique identifier of the quiz
+ agencyId: `agency456` (string) - ID of the agency that owns the quiz
+ title: `Customer Satisfaction Survey` (string) - Title of the quiz
+ creationDate: `2025-05-29T12:00:00Z` (string) - ISO 8601 date of quiz creation
+ questions (array[QuizQuestion]) - List of questions in the quiz

## QuizQuestion (object)
+ id: `q1` (string) - Unique ID of the question
+ question: `How satisfied are you with our service?` (string) - The question text
+ type: `rating` (enum[string]) - Type of the question
    + Members
        + rating - A question that expects a rating response from 1 to 5