FORMAT: 1A
HOST: https://your-api-host.com

# TellMe api

# Group Authentication API

This API allows users to log in using a Firebase token and receive a custom token with additional user claims.

## Login [/api/v1/auth/login]

### Login with Firebase Token [POST]

Authenticates a user using a Firebase ID token. On success, returns a custom token with additional user metadata (email and roles). On failure, returns an appropriate error message.

+ Request (application/json)
    + Attributes (object)
        + firebaseToken: `eyJhbGci...` (string, required) - Firebase ID token obtained from client-side authentication

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + token: `eyJhbGci...` (string) - Custom token with additional claims

+ Response 401 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `User not found` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)
            

## Citizen [/api/v1/citizen]

### Register a new citizen user [POST]

Registers a citizen by verifying their Firebase token, validating their email, checking for uniqueness, saving the user in the database, and returning a custom token.

+ Request (application/json)

    + Attributes (object)
        + email: `citizen@example.com` (string, required) - The email address of the citizen
        + firebaseToken: `eyJhbGci...` (string, required) - Firebase ID token to authenticate the user

+ Response 201 (application/json)

    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + token: `eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...` (string) - A Firebase custom token that can be used for authentication

+ Response 400 (application/json)

    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Email is required` (string)  # If email is empty
            + message: `Email is invalid` (string)   # If email format is invalid
            + message: `Email is already in use` (string)  # If email is already taken

+ Response 500 (application/json)

    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)
            
            
            
# Group Town council API

## Create a new survey [/api/v1/townCouncil/surveys]

### Create a new survey [POST]

Creates a new survey. Returns the ID of the newly created survey if successful. If the creation fails, returns an error response with details.

+ Request (application/json)
    + Attributes (object)
        + survey (Survey) - Survey object to be created

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string) - Status of the response
        + data (object)
            + surveyId: `string` - The ID of the newly created survey

+ Response 400 (application/json)
    + Attributes (object)
        + status: `error` (string) - Status indicating an error
        + data (object)
            + message: `string` - Error message describing the failure
            

## List Surveys [/api/v1/townCouncil/surveys{?pageIndex,pageSize}]

### List surveys [GET]

Returns the list of surveys saved in the system.

+ Parameters
    + pageIndex: 0 (optional, string) - 0-based index of the first item in the current page
    + pageSize: 10 (optional, string) - Number of items to include in the current page

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string) - Status of the response
        + data (object)
            + surveys (array[Survey]) - List of surveys
            + metadata (object)
                + totalCount: 25 (number) - Total number of surveys matching the query

+ Response 400 (application/json)
    + Attributes (object)
        + status: `error` (string) - Status indicating an error
        + data (object)
            + message: `string` - Error message describing the failure
            
            
## Update Survey [/api/v1/townCouncil/surveys/{surveyId}]

### Update a survey [PATCH]

Updates the survey with the provided data. Returns the updated survey ID on success.

+ Parameters
    + surveyId: `Survey ID` (string, required) - The ID of the survey to update

+ Request (application/json)
    + Attributes (object)
        + survey (Survey) - Survey object with updated fields

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + surveyId: `Survey ID` (string) - The ID of the updated survey

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

# Data Structures

## Survey (object)
+ title: `Survey Title` (string, required) - Title of the survey
+ status: `draft` (SurveyStatus, required) - Current status of the survey
+ questions (array[SurveyQuestion], required)
    + Members
        + (SurveyQuestion)

## SurveyQuestion (object)
+ id: `Question ID` (string, required) - Unique identifier for the question
+ question: `Question` (string, required) - The question text
+ type: `multiple-choice` (string, required) - Type of the question (currently only 'multiple-choice' supported)
+ options (array[SurveyQuestionOption], required)
    + Members
        + (SurveyQuestionOption)

## SurveyQuestionOption (object)
+ id: `Option ID` (string, required) - Unique identifier for the option
+ text: `Option description` (string, required) - Text for the option

## SurveyStatus (enum)
+ `draft`
+ `published`
+ `closed`