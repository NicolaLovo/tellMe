FORMAT: 1A
HOST: https://your-api-host.com

# TellMe api

# Group Authentication API

## Login [/api/v1/auth/login]

### Login with Firebase Token [POST]

Authenticates a user using a Firebase ID token. On success, returns a custom token with additional user metadata (email and roles). On failure, returns an appropriate error message.

+ Request (application/json)
    + Attributes (object)
        + firebaseToken: `eagoaasj...` (string, required) - Firebase ID token obtained from client-side authentication

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + token: `eagoaasj...` (string) - Custom token with additional claims

+ Response 404 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `User not found` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)
            

## Citizen registration [/api/v1/auth/citizens]

### Register a new citizen user [POST]

Registers a citizen by verifying their Firebase token, validating their email, checking for uniqueness, saving the user in the database, and returning a custom token.

+ Request (application/json)
    + Attributes (object)
        + email: `citizen@example.com` (string, required) - The email address of the citizen
        + firebaseToken: `eagoaasj...` (string, required) - Firebase ID token to authenticate the user

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + token: `eagoaasj...` (string) - Custom token with additional claims

+ Response 400 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Error` (string) - If some of the request fields are invalid

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

## Agency registration [/api/v1/auth/agencies]

### Register a new agency user [POST]

Registers a new agency user by verifying a Firebase token and creating a user record with agency role. Returns a custom authentication token on success.

+ Request (application/json)
    + Attributes (object)
        + email: `agency@example.com` (string, required) - Email address of the agency user
        + firebaseToken: `eagoaasj...` (string, required) - Firebase ID token to verify identity

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + token: `eagoaasj...` (string) - Custom authentication token for the user

+ Response 400 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Email is invalid` (string) - Missing or invalid email

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)          


# Group Citizens API

## Citizens [/api/v1/citizens{?email}]

### Find Citizen by Email [GET]

Find a citizen user by their email address. Returns the UID of the user if found and if the user has the `citizen` role.

+ Parameters
    + email: `alice@example.com` (optional, string) - Email address of the citizen to find

+ Response 200 (application/json)

    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + uid: `3rE2o8Bo5vX3Itqy1mwqKKrZ9xq2` (string)

+ Response 400 (application/json)

    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Email is required` (string)

+ Response 403 (application/json)

    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `User is not a citizen` (string)

+ Response 404 (application/json)

    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Citizen not found` (string)

+ Response 500 (application/json)

    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

## Citizen Surveys [/api/v1/citizens/{uid}/surveys{?pageIndex,pageSize}]

### List published surveys for a citizen [GET]

Returns a paginated list of surveys available to a citizen. Only surveys with `status: published` are returned. Supports pagination via `pageIndex` and `pageSize`.

+ Parameters
    + uid: `3rE2o8Bo5vX3Itqy1mwqKKrZ9xq2` (string, required) - Unique identifier of the citizen
    + pageIndex: `0` (optional, string) - 0-based index of the first item in the current page (default: 0)
    + pageSize: `10` (optional, string) - Number of items to include in the current page (default: 10)

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + surveys (array[Survey]) - List of published surveys
            + metadata (object)
                + totalCount: 25 (number) - Total number of published surveys

+ Response 400 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Invalid pagination parameters` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

## Survey Answers [/api/v1/citizens/{uid}/surveys/{surveyId}/answer]

### Create a survey answer [POST]

Creates and submits a user's answer to a specific survey. 

+ Parameters
    + surveyId: `survey123` (string, required) - ID of the survey
    + uid: `3rE2o8Bo5vX3Itqy1mwqKKrZ9xq2` (string, required) - User ID submitting the answer

+ Request (application/json)
    + Attributes (object)
        + surveyAnswer (SurveyAnswer, required)

+ Response 201 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)

+ Response 409 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `User already answered this survey.` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string) 

### Get a citizen's survey answer [GET]

Retrieves the survey answer submitted by a specific citizen (`uid`) for a specific survey (`surveyId`). 

+ Parameters
    + uid: `3rE2o8Bo5vX3Itqy1mwqKKrZ9xq2` (string, required) - Unique identifier of the citizen
    + surveyId: `survey123` (string, required) - Unique identifier of the survey

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + answer (SurveyAnswer)

+ Response 404 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Survey answer not found` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

## Citizen Quizzes [/api/v1/citizens/{uid}/quizzes{?pageIndex,pageSize}]

### List available quizzes for a citizen [GET]

Returns a paginated list of pending quizzes associated with the specified citizen.

+ Parameters
    + uid: `3rE2o8Bo5vX3Itqy1mwqKKrZ9xq2` (string, required) - Unique identifier of the citizen
    + pageIndex: `0` (optional, string) - 0-based index of the first item in the current page (default: `0`)
    + pageSize: `10` (optional, string) - Number of items per page (default: `10`)

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + quizzes (array[QuizAnswer]) - List of quizzes with status `pending`
            + metadata (object)
                + totalCount: `5` (number) - Total number of matching quizzes

+ Response 400 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Invalid pagination parameters` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)


# Group Surveys API

## Surveys [/api/v1/surveys{?pageIndex,pageSize}]

### Create a new survey [POST]

Creates a new survey. Returns the ID of the newly created survey if successful.

+ Request (application/json)
    + Attributes (object)
        + survey (Survey) - Survey object to be created

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string) 
        + data (object)
            + surveyId: `string` (string) - The ID of the newly created survey

+ Response 400 (application/json)
    + Attributes (object)
        + status: `error` (string) 
        + data (object)
            + message: `Missing or invalid required fields` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

### List surveys [GET]

Returns the list of surveys saved in the system.

+ Parameters
    + pageIndex: 0 (optional, string) - 0-based index of the first item in the current page
    + pageSize: 10 (optional, string) - Number of items to include in the current page

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string) 
        + data (object)
            + surveys (array[Survey]) - List of surveys
            + metadata (object)
                + totalCount: 25 (number) - Total number of surveys matching the query

+ Response 400 (application/json)
    + Attributes (object)
        + status: `error` (string) 
        + data (object)
            + message: `Invalid pagination parameters` (string) 

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

## Survey [/api/v1/surveys/{surveyId}]

### Get a survey [GET]

Retrieves the survey identified by the given `surveyId`.

+ Parameters
    + surveyId: `survey123` (string, required) - The ID of the survey to retrieve

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + survey (Survey)
            
+ Response 404 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Survey not found` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

## Survey results [/api/v1/surveys/{surveyId}/results]

### Get Survey Results [GET]

Returns aggregated survey results with question and option texts.

+ Parameters
    + surveyId: `survey123` (string) - The ID of the survey

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + surveyResults (SurveyResult)

+ Response 404 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Survey not found` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

### Update a survey [PUT]

Updates the survey with the provided data. Returns the updated survey ID on success.

+ Parameters
    + surveyId: `survey123` (string, required) - The ID of the survey to update

+ Request (application/json)
    + Attributes (object)
        + survey (Survey) - Survey object with updated fields

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + surveyId: `survey123` (string) - The ID of the updated survey
            
+ Response 400 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Only surveys in draft status can be published` (string)
            
+ Response 404 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Survey not found` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

        
# Group Quizzes API

## Quizzes [/api/v1/agencies/{agencyId}/quizzes]

### Create Quiz [POST]

Creates a new quiz associated with the given agency. Ensures the quiz is valid before saving it to the database. Returns the ID of the newly created quiz if successful.

+ Parameters
    + agencyId: `agency123` (string) - ID of the agency creating the quiz

+ Request (application/json)
    + Attributes (object)
        + quiz (Quiz)

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + quizId: `quiz123` (string) - ID of the newly created quiz

+ Response 400 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Missing or invalid required fields` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

## Quiz [/api/v1/agencies/{agencyId}/quizzes/{quizId}]

### Read Quiz [GET]

Fetch a quiz by its ID.

+ Parameters
    + agencyId: `agency123` (string) - ID of the agency that owns the quiz
    + quizId: `quiz123` (string) - Unique identifier of the quiz

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + quiz (Quiz)

+ Response 404 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Quiz not found` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

## Quiz answers [/api/v1/agencies/{agencyId}/quizzes/{quizId}/answers]

### Create Quiz Answer [POST]

Creates a new quiz answer for a specific user and quiz. Stores the answer in the database and returns a unique identifier for the saved answer.

+ Parameters
    + agencyId: `agency123` (string) - ID of the agency that owns the quiz
    + quizId: `quiz456` (string) - ID of the quiz being answered

+ Request (application/json)
    + Attributes (object)
        + quizAnswer (QuizAnswer)

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + answerId (object)
                + answerId: `quizAnswer123` (string)
 
+ Response 400 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Invalid or missing quiz answer object` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

## Quiz answer [/api/v1/agencies/{agencyId}/quizzes/{quizId}/answers/{quizAnswerId}]

### Update quiz answer with citizen responses [PUT]

Allows a citizen to submit answers for a quiz by updating an existing quiz answer. Only the `status` and `answers` fields can be updated, and `status` must be set to `"completed"`.

+ Parameters
    + agencyId: `agency123` (string) - ID of the agency that owns the quiz
    + quizId: `quiz123` (string) - ID of the quiz being answered
    + quizAnswerId: `quizanswer123` (string, required) - Unique identifier of the quiz answer

+ Request (application/json)
    + Attributes (object)
        + quizAnswer (object)
            + quizAnswer (QuizAnswer, required) - Partial quiz answer completed by the user

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + quizAnswerId: `quizanswer123` (string) - The updated quiz answer ID

+ Response 404 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Quiz answer not found` (string)

+ Response 500 (application/json)
    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

## Quiz Results [/api/v1/agencies/{agencyId}/quizzes//{quizId}/results]

### Get Quiz Results [GET]

Returns aggregated results for a completed quiz based on stored answers. Only includes data from answers with `status: completed`.

+ Parameters
    + quizId: `quiz456` (string) - The ID of the quiz to summarize

+ Response 200 (application/json)

    + Attributes (object)
        + status: `success` (string)
        + data (QuizResults)

+ Response 500 (application/json)

    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

# Group Prizes API

## Prizes [/api/v1/prizes{?pageIndex,pageSize}]

### Create Prize [POST]

Creates a new prize. The prize must include a title and a positive number of points.

+ Request (application/json)

    + Attributes (object)
        + prize (Prize)

+ Response 200 (application/json)

    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + prizeId: `prz123` (string) - The ID of the newly created prize

+ Response 400 (application/json)

    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Missing or invalid required fields` (string)

+ Response 500 (application/json)

    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)

### List prizes [GET]

Returns a paginated list of available prizes, sorted by creation date (newest first).

+ Parameters
    + pageIndex: `0` (optional, string) - 0-based index of the first document in the current page. Default is `0`.
    + pageSize: `10` (optional, string) - Number of documents per page. Default is `10`.

+ Response 200 (application/json)

    + Attributes (object)
        + status: `success` (string)
        + data (object)
            + prizes (array[Prize])
            + metadata (object)
                + totalCount: 125 (number) - Total number of prizes in the collection

+ Response 400 (application/json)

    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Invalid pagination parameters` (string)

+ Response 500 (application/json)

    + Attributes (object)
        + status: `error` (string)
        + data (object)
            + message: `Internal server error` (string)


# Data Structures

## Survey (object)
+ title: `Survey Title` (string, required) - Title of the survey
+ rewardPoints: 5 (number, required) - Reward points assigned for the completition of the survey
+ creationDate: `2025-05-20T12:30:00` (string, required) - Timestamp of the creation date of the survey
+ status: `created` (SurveyStatus, required) - Current status of the survey
+ questions (array[SurveyQuestion], required)
    + Members
        + (SurveyQuestion)

## SurveyQuestion (object)
+ id: `Question ID` (string, required) - Unique identifier for the question
+ question: `Question` (string, required) - The question text
+ type: `multiple-choice` (string, required) - Type of the question, currently only 'multiple-choice' supported
+ options (array[SurveyQuestionOption], required)
    + Members
        + (SurveyQuestionOption)

## SurveyQuestionOption (object)
+ id: `Option ID` (string, required) - Unique identifier for the option
+ text: `Option description` (string, required) - Text for the option

## SurveyStatus (enum)
+ `created`
+ `published`
+ `closed`

## SurveyAnswer (object)
+ _id (object, required)
    + surveyId: `abc123` (string, required) - ID of the survey
    + uid: `3rE2o8Bo5vX3Itqy1mwqKKrZ9xq2` (string, required) - ID of the user who answered
+ creationDate: `2025-05-27T12:00:00Z` (string, required) - Timestamp when the answer was created
+ answer (array[SurveyQuestionAnswer], required) - Answers to the survey questions
    + Members
        + (SurveyQuestionAnswer)

## SurveyQuestionAnswer (object)
+ id: `q1` (string, required) - ID of the question being answered
+ answer: `Very satisfied` (string, required) - User's answer to the question
+ type: `multiple-choice` (string, required) - Type of the question (currently only 'multiple-choice')

## SurveyResult (object)
+ surveyId: `abc123` (string)
+ surveyTitle: `Favorite Programming Language?` (string)
+ results (array[QuestionResult])

## QuestionResult (object)
+ questionId: `q1` (string)
+ questionText: `What is your favorite language?` (string)
+ options (array[OptionResult])

## OptionResult (object)
+ optionId: `opt1` (string)
+ optionText: `JavaScript` (string)
+ votes: 42 (number)

## Quiz (object)
+ _id: `abc123` (string) - Unique identifier of the quiz
+ agencyId: `agency123` (string) - ID of the agency that owns the quiz
+ title: `Customer Satisfaction Survey` (string) - Title of the quiz
+ creationDate: `2025-05-29T12:00:00Z` (string) - ISO 8601 date of quiz creation
+ questions (array[QuizQuestion]) - List of questions in the quiz

## QuizQuestion (object)
+ id: `q1` (string) - Unique ID of the question
+ question: `How satisfied are you with our service?` (string) - The question text
+ type: `rating` (enum[string]) - Type of the question
    + Members
        + rating - A question that expects a rating response from 1 to 5

## QuizAnswer (object)
+ _id (object) - Composite ID of the quiz answer
    + quizId: `quiz456` (string) - ID of the related quiz
    + uid: `3rE2o8Bo5vX3Itqy1mwqKKrZ9xq2` (string) - ID of the user who submitted the answer
+ creationDate: `2025-05-29T12:00:00Z` (string) - ISO 8601 date of answer submission
+ status: `pending` (enum[string]) - Status of the quiz answer
    + Members
        + pending
        + completed
+ answers (optional, array[QuizQuestionAnswer]) - Answers to quiz questions (only if status is `completed`)

## QuizQuestionAnswer (object)
+ questionId: `q1` (string) - ID of the answered question
+ optionId: `4` (enum[string]) - Selected option (1 to 5)
    + Members
        + 1
        + 2
        + 3
        + 4
        + 5
+ type: `rating` (enum[string]) - Type of the question
    + Members
        + rating

## QuizResults (object)
+ quizId: `quiz456` (string) - The ID of the quiz
+ results (array[QuizQuestionResult]) - List of questions with their aggregated responses

## QuizQuestionResult (object)
+ questionId: `q1` (string) - ID of the question
+ type: `rating` (enum[string]) - Type of the question
    + Members
        + rating
+ options (array[QuizOptionResult]) - List of possible options with vote counts

## QuizOptionResult (object)
+ optionId: `3` (enum[string]) - Option value (1 to 5)
    + Members
        + 1
        + 2
        + 3
        + 4
        + 5
+ votes: 42 (number) - Total votes received for this option

## Prize (object)
+ _id: `prz123` (string) - Unique identifier for the prize
+ title: `Bluetooth Speaker` (string) - Title or name of the prize
+ creationDate: `2025-06-10T12:00:00Z` (string) - ISO 8601 formatted creation date
+ points: 150 (number) - Number of points required to redeem this prize